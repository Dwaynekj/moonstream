import { useQuery, useQueryCache, useMutation } from "react-query";
import { GroupService } from "../services";
import { useToast } from ".";
import { queryCacheProps } from "./hookCommon";
import { useUser } from "../hooks";

const useGroups = () => {
  const cache = useQueryCache();
  const toast = useToast();
  const { user } = useUser();

  const fetchGroups = async (query) => {
    const response = await GroupService.getGroups(query);

    return response?.data?.groups;
  };

  const {
    data,
    isLoading,
    refetch: getGroups,
  } = useQuery("groups", fetchGroups, queryCacheProps);

  const [createGroup, createStatus] = useMutation(
    (groupName) => GroupService.createGroup(groupName),
    {
      onSuccess: (response) => {
        const currentGroups = cache.getQueryData(["groups"]);
        currentGroups.push({
          autogenerated: false,
          group_id: response.data.id,
          group_name: response.data.group_name,
          user_id: user.user_id,
          user_type: "owner",
        });
        cache.setQueryData(["groups"], currentGroups);
        cache.refetchQueries(["groups"]);
      },
      onError: (error) => {
        toast(error, "error");
      },
    }
  );

  //ToDo: const createGroupMutation = useMutation(.. when upgrading to React Query 3
  const createGroupMutation = {
    createGroup,
    isLoading: createStatus.isLoading,
  };

  const [deleteGroup, deleteStatus] = useMutation(GroupService.deleteGroup, {
    onMutate: (groupId) => {
      const previousGroups = cache.getQueryData(["groups"]);

      const newGroups = previousGroups.filter(
        (group) => group.group_id !== groupId
      );

      cache.setQueryData(["groups"], [...newGroups]);

      return previousGroups;
    },
    onError: (error, variables, context) => {
      cache.setQueryData(["groups"], context);
      toast(error, "error");
    },
  });

  //ToDo: const createGroupMutation = useMutation(.. when upgrading to React Query 3
  const deleteGroupMutation = {
    deleteGroup,
    isLoading: deleteStatus.isLoading,
  };

  const [renameGroup, renameStatus] = useMutation(GroupService.setGroupName, {
    onMutate: (data) => {
      const newGroups = cache.getQueryData(["groups"]);
      const previousGroups = [...newGroups];

      newGroups.forEach((group) => {
        if (group.group_id === data.groupId) {
          group.group_name = data.name;
        }
      });

      cache.setQueryData(["groups"], [...newGroups]);

      return previousGroups;
    },

    onError: (error, variables, context) => {
      cache.setQueryData(["groups"], context);
      toast(error, "error");
    },

    onSuccess: () => {
      getGroups();
    },
  });

  //ToDo: const renameGroupMutation = useMutation(.. when upgrading to React Query 3
  const renameGroupMutation = {
    renameGroup,
    isLoading: renameStatus.isLoading,
    status: { ...renameStatus },
  };

  return {
    data,
    isLoading,
    getGroups,
    createGroupMutation,
    deleteGroupMutation,
    renameGroupMutation,
  };
};

export default useGroups;
