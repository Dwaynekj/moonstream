"""Inital for blocks and transactions

Revision ID: aa903a90b8bf
Revises: 
Create Date: 2021-07-26 13:55:38.057312

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'aa903a90b8bf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ethereum_blocks',
    sa.Column('block_number', sa.BigInteger(), nullable=False),
    sa.Column('difficulty', sa.BigInteger(), nullable=True),
    sa.Column('extra_data', sa.VARCHAR(length=128), nullable=True),
    sa.Column('gas_limit', sa.BigInteger(), nullable=True),
    sa.Column('gas_used', sa.BigInteger(), nullable=True),
    sa.Column('hash', sa.VARCHAR(length=256), nullable=True),
    sa.Column('logs_bloom', sa.VARCHAR(length=1024), nullable=True),
    sa.Column('miner', sa.VARCHAR(length=256), nullable=True),
    sa.Column('nonce', sa.VARCHAR(length=256), nullable=True),
    sa.Column('parent_hash', sa.VARCHAR(length=256), nullable=True),
    sa.Column('receipt_root', sa.VARCHAR(length=256), nullable=True),
    sa.Column('uncles', sa.VARCHAR(length=256), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('state_root', sa.VARCHAR(length=256), nullable=True),
    sa.Column('timestamp', sa.BigInteger(), nullable=True),
    sa.Column('total_difficulty', sa.VARCHAR(length=256), nullable=True),
    sa.Column('transactions_root', sa.VARCHAR(length=256), nullable=True),
    sa.Column('indexed_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', statement_timestamp())"), nullable=False),
    sa.PrimaryKeyConstraint('block_number', name=op.f('pk_ethereum_blocks')),
    sa.UniqueConstraint('block_number', name=op.f('uq_ethereum_blocks_block_number'))
    )
    op.create_index(op.f('ix_ethereum_blocks_timestamp'), 'ethereum_blocks', ['timestamp'], unique=False)
    op.create_table('ethereum_pending_transactions',
    sa.Column('hash', sa.VARCHAR(length=256), nullable=False),
    sa.Column('block_number', sa.BigInteger(), nullable=False),
    sa.Column('from_address', sa.VARCHAR(length=256), nullable=True),
    sa.Column('to_address', sa.VARCHAR(length=256), nullable=True),
    sa.Column('gas', sa.Text(), nullable=True),
    sa.Column('gas_price', sa.Text(), nullable=True),
    sa.Column('input', sa.Text(), nullable=True),
    sa.Column('nonce', sa.VARCHAR(length=256), nullable=True),
    sa.Column('transaction_index', sa.BigInteger(), nullable=True),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('indexed_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', statement_timestamp())"), nullable=False),
    sa.ForeignKeyConstraint(['block_number'], ['ethereum_blocks.block_number'], name=op.f('fk_ethereum_pending_transactions_block_number_ethereum_blocks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('hash', name=op.f('pk_ethereum_pending_transactions')),
    sa.UniqueConstraint('hash', name=op.f('uq_ethereum_pending_transactions_hash'))
    )
    op.create_index(op.f('ix_ethereum_pending_transactions_from_address'), 'ethereum_pending_transactions', ['from_address'], unique=False)
    op.create_index(op.f('ix_ethereum_pending_transactions_to_address'), 'ethereum_pending_transactions', ['to_address'], unique=False)
    op.create_table('ethereum_transactions',
    sa.Column('hash', sa.VARCHAR(length=256), nullable=False),
    sa.Column('block_number', sa.BigInteger(), nullable=False),
    sa.Column('from_address', sa.VARCHAR(length=256), nullable=True),
    sa.Column('to_address', sa.VARCHAR(length=256), nullable=True),
    sa.Column('gas', sa.Text(), nullable=True),
    sa.Column('gas_price', sa.Text(), nullable=True),
    sa.Column('input', sa.Text(), nullable=True),
    sa.Column('nonce', sa.VARCHAR(length=256), nullable=True),
    sa.Column('transaction_index', sa.BigInteger(), nullable=True),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('indexed_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', statement_timestamp())"), nullable=False),
    sa.ForeignKeyConstraint(['block_number'], ['ethereum_blocks.block_number'], name=op.f('fk_ethereum_transactions_block_number_ethereum_blocks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('hash', name=op.f('pk_ethereum_transactions')),
    sa.UniqueConstraint('hash', name=op.f('uq_ethereum_transactions_hash'))
    )
    op.create_index(op.f('ix_ethereum_transactions_from_address'), 'ethereum_transactions', ['from_address'], unique=False)
    op.create_index(op.f('ix_ethereum_transactions_to_address'), 'ethereum_transactions', ['to_address'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ethereum_transactions_to_address'), table_name='ethereum_transactions')
    op.drop_index(op.f('ix_ethereum_transactions_from_address'), table_name='ethereum_transactions')
    op.drop_table('ethereum_transactions')
    op.drop_index(op.f('ix_ethereum_pending_transactions_to_address'), table_name='ethereum_pending_transactions')
    op.drop_index(op.f('ix_ethereum_pending_transactions_from_address'), table_name='ethereum_pending_transactions')
    op.drop_table('ethereum_pending_transactions')
    op.drop_index(op.f('ix_ethereum_blocks_timestamp'), table_name='ethereum_blocks')
    op.drop_table('ethereum_blocks')
    # ### end Alembic commands ###
