"""Add log_index, block_number , timestamp remove address_id and add address just as text field

Revision ID: f1e8cf50a3ff
Revises: d6ed4b1b43d5
Create Date: 2021-10-12 15:35:49.477610

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f1e8cf50a3ff"
down_revision = "d6ed4b1b43d5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # via
    ###### insert into  table

    op.execute(
        """CREATE TABLE ethereum_labels_new_V2 AS
                SELECT
                    ethereum_labels.id as id,
                    ethereum_labels.label as label,
                    ethereum_labels.label_data as label_data,
                    ethereum_labels.created_at as created_at,
                    ethereum_labels.transaction_hash as transaction_hash,
                    ethereum_addresses.address as address
                FROM
                    ethereum_labels
                    left join ethereum_addresses ON ethereum_labels.address_id = ethereum_addresses.id;

                /* Set correct columns metadata columns TYPE | Nullable | Default  */
                ALTER TABLE
                    ethereum_labels_new_V2
                ALTER COLUMN
                    id
                SET
                    NOT NULL,
                ALTER COLUMN
                    label
                SET
                    NOT NULL,
                ALTER COLUMN
                    created_at TYPE timestamp with time zone,
                ALTER COLUMN
                    created_at
                SET
                    DEFAULT timezone('utc' :: text, statement_timestamp()),
                ALTER COLUMN
                    created_at
                SET
                    NOT NULL,
                ALTER COLUMN
                    transaction_hash TYPE character varying(256),
                ALTER COLUMN
                    address TYPE character varying(256);

                /* ADD new columns  */
                ALTER TABLE
                    ethereum_labels_new_V2
                ADD
                    log_index JSONB NULL,
                ADD
                    block_number bigint NULl,
                ADD
                    transaction_timestamp bigint NULL;

                /* Create constraine must be unique cross database */
                ALTER TABLE
                    ONLY public.ethereum_labels_new_V2
                ADD
                    CONSTRAINT pk_ethereum_labels_V2 PRIMARY KEY (id);

                ALTER TABLE
                    ONLY public.ethereum_labels_new_V2
                ADD
                    CONSTRAINT uq_ethereum_labels_id_V2 UNIQUE (id);

                /* Create indexes must be unique cross database */
                CREATE INDEX idx_ethereum_labels_opensea_nft_name_V2 ON public.ethereum_labels_new_V2 USING btree (((label_data ->> 'name' :: text)))
                WHERE
                    ((label) :: text = 'opensea_nft' :: text);

                CREATE INDEX ix_ethereum_labels_address_V2 ON public.ethereum_labels_new_V2 USING btree (address);

                CREATE INDEX ix_ethereum_labels_block_number_V2 ON public.ethereum_labels_new_V2 USING btree (block_number);

                CREATE INDEX ix_ethereum_labels_label_V2 ON public.ethereum_labels_new_V2 USING btree (label);

                CREATE INDEX ix_ethereum_labels_transaction_hash_V2 ON public.ethereum_labels_new_V2 USING btree (transaction_hash);

                CREATE INDEX ix_ethereum_labels_transaction_timestamp_V2 ON public.ethereum_labels_new_V2 USING btree (transaction_timestamp);
                """
    )

    op.execute(
        """
                    BEGIN TRANSACTION;

                    LOCK TABLE ethereum_labels IN ACCESS EXCLUSIVE MODE;

                    INSERT INTO
                        ethereum_labels_new_V2 (
                            id,
                            label,
                            label_data,
                            created_at,
                            transaction_hash,
                            address
                        )
                    SELECT
                        ethereum_labels.id as id,
                        ethereum_labels.label as label,
                        ethereum_labels.label_data as label_data,
                        ethereum_labels.created_at as created_at,
                        ethereum_labels.transaction_hash as transaction_hash,
                        ethereum_addresses.address as address
                    FROM
                        (
                            SELECT
                                Row_Number() over (
                                    order by
                                        id
                                ) AS RowIndex,
                                *
                            from
                                ethereum_labels_new_V2
                        ) AS ethereum_labels_new_V2
                        INNER JOIN (
                            SELECT
                                Row_Number() over (
                                    order by
                                        id
                                ) AS RowIndex,
                                *
                            from
                                ethereum_labels
                        ) AS ethereum_labels ON ethereum_labels_old.RowIndex > ethereum_labels.RowIndex
                        INNER JOIN ethereum_addresses ON ethereum_labels.address_id = ethereum_addresses.id;

                    /* Rename tabel */
                    ALTER TABLE
                        ethereum_labels RENAME TO ethereum_labels_old;

                    ALTER TABLE
                        ethereum_labels_new_V2 RENAME TO ethereum_labels;

                    COMMIT;
                    """
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column(
    #     "ethereum_labels",
    #     sa.Column("address_id", sa.INTEGER(), autoincrement=False, nullable=True),
    # )
    # op.create_foreign_key(
    #     "fk_ethereum_labels_address_id_ethereum_addresses",
    #     "ethereum_labels",
    #     "ethereum_addresses",
    #     ["address_id"],
    #     ["id"],
    #     ondelete="CASCADE",
    # )
    # op.create_index(
    #     "ix_ethereum_labels_address_id", "ethereum_labels", ["address_id"], unique=False
    # )
    # op.drop_index(
    #     op.f("ix_ethereum_labels_transaction_timestamp"), table_name="ethereum_labels"
    # )
    # op.drop_index(op.f("ix_ethereum_labels_block_number"), table_name="ethereum_labels")
    # op.drop_index(op.f("ix_ethereum_labels_address"), table_name="ethereum_labels")
    # op.drop_column("ethereum_labels", "transaction_timestamp")
    # op.drop_column("ethereum_labels", "log_index")
    # op.drop_column("ethereum_labels", "block_number")
    # op.execute(
    #     """ UPDATE ethereum_labels
    #         SET
    #         address_id = address.id
    #         FROM ethereum_labels AS labels
    #             inner join ethereum_addresses address
    #             ON labels.address = address.address
    #             where ethereum_labels.address IS NOT NULL
    #     """
    # )
    # op.drop_column("ethereum_labels", "address")
    # ### end Alembic commands ###
